const express = require('express');
const http = require('http');
const WebSocket = require('ws');
const path = require('path');

const app = express();
const server = http.createServer(app);
const wss = new WebSocket.Server({ server });

app.use(express.static(path.join(__dirname, 'public'));

wss.on('connection', (ws) => {
  ws.on('message', (message) => {
    // Broadcast the received drawing data to all connected clients (including the Android app).
    wss.clients.forEach((client) => {
      if (client !== ws && client.readyState === WebSocket.OPEN) {
        client.send(message);
      }
    });
  });
});

server.listen(3000, () => {
  console.log('Server started on http://localhost:3000');
});

@@@@@@@@@@@@@@@@@@@@@@@@


import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.util.AttributeSet;
import android.view.MotionEvent;
import android.view.View;
import okhttp3.WebSocket;

public class CanvasView extends View {
    private Paint paint;
    private Canvas canvas;
    private Bitmap bitmap;
    private WebSocket webSocket;

    public CanvasView(Context context, AttributeSet attrs) {
        super(context, attrs);
        setupDrawing();
    }

    private void setupDrawing() {
        paint = new Paint();
        paint.setStrokeWidth(5);
        paint.setStyle(Paint.Style.STROKE);

        bitmap = Bitmap.createBitmap(400, 400, Bitmap.Config.ARGB_8888);
        canvas = new Canvas(bitmap);
    }

    @Override
    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        canvas.drawBitmap(bitmap, 0, 0, paint);
    }

    @Override
    public boolean onTouchEvent(MotionEvent event) {
        float x = event.getX();
        float y = event.getY();

        switch (event.getAction()) {
            case MotionEvent.ACTION_DOWN:
                canvas.drawPoint(x, y, paint);
                break;

            case MotionEvent.ACTION_MOVE:
                canvas.drawLine(x, y, x + 1, y + 1, paint);
                break;

            case MotionEvent.ACTION_UP:
                break;
        }

        invalidate();

        if (webSocket != null) {
            String drawingData = String.format("{\"x\":%f,\"y\":%f}", x, y);
            webSocket.send(drawingData);
        }

        return true;
    }

    public void setWebSocket(WebSocket webSocket) {
        this.webSocket = webSocket;
    }
}





@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

import androidx.appcompat.app.AppCompatActivity;
import android.os.Bundle;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.WebSocket;
import okhttp3.WebSocketListener;

public class MainActivity extends AppCompatActivity {
    private CanvasView canvasView;
    private WebSocket webSocket;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        canvasView = findViewById(R.id.canvasView);

        OkHttpClient client = new OkHttpClient();
        Request request = new Request.Builder().url("ws://your_server_ip:3000").build(); // Replace with your server URL

        WebSocketListener listener = new WebSocketListener() {
            @Override
            public void onOpen(WebSocket webSocket, okhttp3.Response response) {
                // WebSocket connection is opened.
                canvasView.setWebSocket(webSocket);
            }

            @Override
            public void onMessage(WebSocket webSocket, String text) {
                // Handle received drawing data.
                runOnUiThread(() -> {
                    try {
                        JSONObject json = new JSONObject(text);
                        float x = (float) json.getDouble("x");
                        float y = (float) json.getDouble("y");
                        canvasView.onTouchEvent(MotionEvent.obtain(0, 0, MotionEvent.ACTION_MOVE, x, y, 0));
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                });
            }

            @Override
            public void onClosed(WebSocket webSocket, int code, String reason) {
                // WebSocket connection is closed.
            }
        };

        webSocket = client.newWebSocket(request, listener);
        client.dispatcher().executorService().shutdown();
    }
}





@@@@@@@@@@@@@@@@@@@@@


<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".MainActivity">

    <com.example.yourpackage.CanvasView
        android:id="@+id/canvasView"
        android:layout_width="match_parent"
        android:layout_height="match_parent" />

</RelativeLayout>








