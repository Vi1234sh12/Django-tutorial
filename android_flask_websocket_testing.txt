pip install flask flask-socketio
---------------------------
from flask import Flask, render_template
from flask_socketio import SocketIO

app = Flask(__name__)
socketio = SocketIO(app)

@app.route('/')
def index():
    return render_template('index.html')

@socketio.on('draw')
def handle_draw(data):
    socketio.emit('draw', data, broadcast=True)

if __name__ == '__main__':
    socketio.run(app, debug=True)
----------------------------

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Real-time Drawing</title>
</head>
<body>
  <canvas id="drawingCanvas" width="400" height="400" style="border: 1px solid black;"></canvas>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.0.1/socket.io.js"></script>
  <script>
    const canvas = document.getElementById('drawingCanvas');
    const context = canvas.getContext('2d');

    const socket = io.connect('http://localhost:5000');

    canvas.addEventListener('mousemove', (e) => {
      if (e.buttons !== 1) return; // Only draw when the left mouse button is held down

      context.beginPath();
      context.lineWidth = 2;
      context.lineCap = 'round';
      context.strokeStyle = 'black';
      context.moveTo(e.clientX - canvas.getBoundingClientRect().left, e.clientY - canvas.getBoundingClientRect().top);
      socket.emit('draw', { x: e.clientX, y: e.clientY });
    });

    socket.on('draw', (data) => {
      context.lineTo(data.x - canvas.getBoundingClientRect().left, data.y - canvas.getBoundingClientRect().top);
      context.stroke();
    });
  </script>
</body>
</html>

----------------------------
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.view.View;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {
    private Bitmap bitmap;
    private Canvas canvas;
    private Paint paint;
    private View canvasView;
    private Handler handler;
    private WebSocketClient webSocketClient;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        bitmap = Bitmap.createBitmap(400, 400, Bitmap.Config.ARGB_8888);
        canvas = new Canvas(bitmap);
        paint = new Paint();
        paint.setColor(Color.BLACK);
        paint.setStrokeWidth(2);
        paint.setStyle(Paint.Style.STROKE);

        canvasView = findViewById(R.id.canvasView);
        canvasView.setBackgroundDrawable(new BitmapDrawable(getResources(), bitmap));

        handler = new Handler(Looper.getMainLooper());

        webSocketClient = new WebSocketClient();
        webSocketClient.connectWebSocket("ws://your_server_ip:5000");
        webSocketClient.setOnMessageListener(this::handleWebSocketMessage);
    }

    private void handleWebSocketMessage(String message) {
        try {
            JSONObject data = new JSONObject(message);
            float x = (float) data.getDouble("x");
            float y = (float) data.getDouble("y");

            handler.post(() -> {
                canvas.drawLine(x, y, x, y, paint);
                canvasView.invalidate();
            });
        } catch (JSONException e) {
            e.printStackTrace();
        }
    }
}
-----------------------------------------------

